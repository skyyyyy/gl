Flowing Water Feb 9 2015
输入是一个 N*N的矩阵，代表地势高度。如果下雨水流只能流去比他矮或者一样高的地势。
矩阵左边和上边是太平洋，右边和下边是大西洋。求出所有的能同时流到两个大洋的点。

For example:

Pacific: ~
Atlantic: *
~  ~   ~   ~   ~   ~  ~
~  1   2   2   3  (5) *
~  3   2   3  (4) (4) *
~  2   4  (5)  3   1  *
~ (6) (7)  1   4   5  *
~ (5)  1   1   2   4  *
*  *   *   *   *   *  *
括号里即为结果：
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]


Google近期高频题。
Brutal force的解法很简单，每个点搜索一次，接触到太平洋或者大西洋就记录下来。最后扫一遍输出同时能走到两个ocean的点即可。
复杂度为O(n^2)。

优化的话，可以从两个ocean的点开始，从外往里搜。首先搜所有太平洋的点，记录下能接触到的position。然后同理搜大西洋的点，求出交集即可。
搜索用DFS和BFS都可以，复杂度为O(n^2)。

void search(Point pt, unordered_map<Point, bool>& visited, vector<vector<int>>& mat) {
    vector<Point> dirs = {{0,1}, {0,-1}, {1,0}, {-1,0}};
    for(auto dir : dirs) {
        Point newp = { dir.x + pt.x, dir.y + pt.y };
        if( newp.x < 0 || newp.x >= mat.size() || newp.y < 0 || newp.y >= mat.size() ) {
            continue;
        }
        if( mat[newp.x][newp.y] < mat[pt.x][pt.y] || visited.count(newp) ) {
            continue;
        }
        visited[newp] = true;
        search(newp, visited, mat);
    }
}
vector<Point> flowing_water(vector<vector<int>>& mat) {
    int n = mat.size();
    
    unordered_map<Point, bool> visited_pac;    
    for(int i = 0; i < n; ++i) {
        visited_pac[{0,i}] = true;
        search({0,i}, visited_pac, mat);
    }    
    for(int i = 0; i < n; ++i) {
        visited_pac[{i,0}] = true;
        search({i,0}, visited_pac, mat);
    }
    
    unordered_map<Point, bool> visited_alt;    
    for(int i = 0; i < n; ++i) {
        visited_alt[{n-1,i}] = true;
        search({n-1,i}, visited_alt, mat);
    }    
    for(int i = 0; i < n; ++i) {
        visited_alt[{i,n-1}] = true;
        search({i,n-1}, visited_alt, mat);
    }
    
    vector<Point> ret;
    for(auto p : visited_alt) {
        if(visited_pac.count(p.first))
            ret.push_back(p.first);
    }    
    return ret;
}
